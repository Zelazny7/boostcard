"r_C22_stl_recency_d" %in% mod$var.names[v + 1]
?gbm
pretty.gbm.tree(mod, 1)
data(titanic)
mod2 <- gbm(Survived~., data = titanic, shrinkage = 1)
mod2
pretty.gbm.tree(mod, 1)
pretty.gbm.tree(mod2, 1)
pretty.gbm.tree(mod2, 2)
vdata
vdata <- getGBMVarData(mod, n.trees)
n.trees
classing <- gbm.to.scorecard(mod, 1:gbm.perf(mod), df[s,-drop])
mod
n.trees
head(newdata)
vdata
row.names(summary(mod))
tmp <- row.names(summary(mod))[summary(mod)[,2]>0]
tmp
row.names(vdata)
row.names(vdata) %in% tmp
tmp %in% vdata
tmp %in% row.names(vdata)
which(tmp %in% row.names(vdata))
tmp(tmp %in% row.names(vdata))
tmp[tmp %in% row.names(vdata)]
tmp[!(tmp %in% row.names(vdata))]
summary(mod)[tmp[!(tmp %in% row.names(vdata))],]
which(mod$var.names == 'r_C22_stl_recency_d')
v
v <- sapply(mod$trees[n.trees], function(x) x[[1]][1])
v
table(v == 114)
unique(getVarNames(mod, n.trees))
'r_C22_stl_recency_d' %in% unique(getVarNames(mod, n.trees))
unique(getVarNames(mod, n.trees)) == 'r_C22_stl_recency_d'
table(v == 114 - 1)
plot(mod, 'r_C22_stl_recency_d')
plot(mod, 114)
plot(mod, 114)
plot(mod, 113)
plot(mod, 114)
plot(mod, 113)
plot(mod, 1)
plot(mod, 2)
plot(mod, 3)
plot(mod, 4)
plot(mod, 5)
plot(mod, 6)
v
table(v)
summary(mod, 113)
table(v)
plot(mod, 113)
plot(mod, 114)
plot(mod, 113)
plot(mod, 6)
plot(mod, 11)
plot(mod, 12)
plot(mod, 13)
plot(mod, 14)
plot(mod, 15)
plot(mod, 16)
plot(mod, 19)
plot(mod, 20)
plot(mod, 22)
plot(mod, 19)
plot(mod, 21)
plot(mod, 22)
plot(mod, 23)
plot(mod, 37)
plot(mod, 38)
plot(mod, 114)
plot(mod, 115)
plots <- lapply(seq_along(classing), function(i) {
plt <- data.frame(classing[[i]])
ggplot(plt, aes(x=value, y=score, fill=score)) +
geom_bar(stat='identity', color='black') +
coord_flip() +
scale_x_discrete(limits=rev(plt$value)) +
scale_fill_gradient2(low='blue', high='red') +
ggtitle(names(classing)[i])
})
classing[[i]]
classing[[1]]
classing[[2]]
a <- factor(letters[1:5])
a
class(a)
attributes(a)
print.factor
classing[[2]]
convert <- function(x) {
data.frame(
lab = c('Null', x$value),
val = c(x$missing, x$value))}
convert(classing[[2]])
convert <- function(x) {
data.frame(
lab = c('Null', x$value),
val = c(x$missing, x$value))}
convert(classing[[2]])
plots <- lapply(seq_along(classing), function(i) {
if (i > 1) {
plt <- convert(classing[[i]])
ggplot(plt, aes(x=value, y=score, fill=score)) +
geom_bar(stat='identity', color='black') +
coord_flip() +
scale_x_discrete(limits=rev(plt$value)) +
scale_fill_gradient2(low='blue', high='red') +
ggtitle(names(classing)[i])
}})
plots[[1]]
plots[[2]]
plots[[3]]
convert(classing[[2]])
convert(classing[[3]])
convert <- function(x) {
data.frame(
score = c('Null', x$value),
value = c(x$missing, x$score))}
plots <- lapply(seq_along(classing), function(i) {
if (i > 1) {
plt <- convert(classing[[i]])
ggplot(plt, aes(x=value, y=score, fill=score)) +
geom_bar(stat='identity', color='black') +
coord_flip() +
scale_x_discrete(limits=rev(plt$value)) +
scale_fill_gradient2(low='blue', high='red') +
ggtitle(names(classing)[i])
}})
plots[[1]]
plots[[2]]
convert(classing[[2]])
sapply(convert(classing[[2]]), class)
convert <- function(x) {
data.frame(
score = c('Null', x$value),
value = c(x$missing, x$score)),
stringsAsFactors=F}
convert <- function(x) {
data.frame(
score = c('Null', x$value),
value = c(x$missing, x$score),
stringsAsFactors=F)}
convert(classing[[2]])
plots <- lapply(seq_along(classing), function(i) {
if (i > 1) {
plt <- convert(classing[[i]])
ggplot(plt, aes(x=value, y=score, fill=score)) +
geom_bar(stat='identity', color='black') +
coord_flip() +
scale_x_discrete(limits=rev(plt$value)) +
scale_fill_gradient2(low='blue', high='red') +
ggtitle(names(classing)[i])
}})
plots[[1]]
plots[[2]]
plt <- convert(classing[[1]])
plt <- convert(classing[[2]])
plt
ggplot(plt, aes(x=value, y=score, fill=score)) +
geom_bar(stat='identity', color='black') +
coord_flip() +
scale_x_discrete(limits=rev(plt$value)) +
scale_fill_gradient2(low='blue', high='red') +
ggtitle(names(classing)[i])
ggplot(plt, aes(x=value, y=score, fill=score)) +
geom_bar(stat='identity', color='black') +
coord_flip() +
scale_x_discrete(limits=rev(plt$value)) +
scale_fill_gradient2(low='blue', high='red')
plt
convert <- function(x) {
data.frame(
value = c('Null', x$value),
score = c(x$missing, x$score),
stringsAsFactors=F)}
plots <- lapply(seq_along(classing), function(i) {
if (i > 1) {
plt <- convert(classing[[i]])
ggplot(plt, aes(x=value, y=score, fill=score)) +
geom_bar(stat='identity', color='black') +
coord_flip() +
scale_x_discrete(limits=rev(plt$value)) +
scale_fill_gradient2(low='blue', high='red') +
ggtitle(names(classing)[i])
}})
plots[[1]]
plots[[2]]
plots[[3]]
plots
classing$r_L75_Add_Drop_Delivery_i
predict.scorecard(classing, df[s, -drop])
undebug(predict.scorecard)
predict.scorecard(classing, df[s, -drop])
phat <- predict.scorecard(classing, df[s, -drop])
classing <- gbm.to.scorecard(mod, 1:gbm.perf(mod), df[s,-drop])
phat <- predict.scorecard(classing, df[s, -drop])
classing[[2]]
adj.weights <- function(x) {
adj <- x$missing
x$missing <- x$missing - adj
x$score - adj
x
}
classing2 <- lapply(classing, adj.weights)
classing
classing[[2]]
adj.weights(classing[[2]])
adj.weights(classing[[1]])
classing2 <- lapply(classing[-1], adj.weights)
classing2
classing2 <- c(classing[1], lapply(classing[-1], adj.weights))
classing2
phat <- predict.scorecard(classing, df[s, -drop])
phat2 <- predict.scorecard(classing2, df[s, -drop])
head(phat, phat2)
head(cbind(phat, phat2))
plot(phat, phat2)
cor(phat, phat2)
classing2 <- c(classing[1], lapply(classing[2], adj.weights), classing[-c(1:2)])
classing2
phat <- predict.scorecard(classing, df[s, -drop])
phat2 <- predict.scorecard(classing2, df[s, -drop])
cor(phat, phat2)
plot(phat, phat2)
table(phat > phat2)
classing[[2]]
table(df[s, 'r_A41_Prop_Owner_d'])
is.na(table(df[s, 'r_A41_Prop_Owner_d']))
(table(is.na(df[s, 'r_A41_Prop_Owner_d'])))
classing[[2]]
classing2 <- c(classing[1], lapply(classing[-1], adj.weights))
phat2 <- predict.scorecard(classing2, df[s, -drop])
ks.table(phat, df[s, 'depvar'])
ks.table(phat2, df[s, 'depvar'])
adj.weights <- function(x) {
x$missing <- 0
x
}
classing2 <- c(classing[1], lapply(classing[-1], adj.weights))
phat <- predict.scorecard(classing, df[s, -drop])
phat2 <- predict.scorecard(classing2, df[s, -drop])
ks.table(phat2, df[s, 'depvar'])
summary(phat, phat2)
summary(phat)
summary(phat2)
mono
get.mono.cols(colnames(df)[-drop])
mono <- get.mono.cols(colnames(df)[-drop])
df2 <- df
df2 <- df[, -drop]
df2 <- df[, -drop]
for (i in 1:ncol(df2)) {
if (mono[i] == 1) {
x <- df2[,i]
df2[is.na(x), i] <- min(x, na.rm = T)
} else {
df2[is.na(x), i] <- max(x, na.rm = T)
}
}
table(df2[s, 'r_A41_Prop_Owner_d'])
na.rec <- rep(NA, ncol(df[s, -drop]))
na.rec
rbind(df[s, -drop], na.rec)
tmp <- rbind(df[s, -drop], na.rec)
phat <- predict.scorecard(classing, tmp)
tail(phat)
summary(phat)
hist(phat)
abline(a = -0.4087424, h = 1)
abline(a = -0.4087424, b = 1)
abline(a = -0.4087424, b = 0)
abline(a = 0, b = -0.4087424)
abline(a = 5, b = -0.4087424)
abline(a = 1000, b = -0.4087424)
abline(v = -0.4807424)
abline(v = -0.4807424, col='red')
hist(phat, breaks=100)
abline(v = -0.4807424, col='red')
head(df2)
table(df2$r_C23_inp_addr_owned_not_occ_d)
table(df2$r_I60_inq_util_count12_i)
table(df2$r_A46_Curr_AVM_AutoVal_d)
table(is.na(df2$r_A46_Curr_AVM_AutoVal_d))
df2 <- df[, -drop]
for (i in 1:ncol(df2)) {
if (mono[i] == 1) {
x <- df2[,i]
df2[is.na(x), i] <- min(x, na.rm = T)
} else {
df2[is.na(x), i] <- max(x, na.rm = T)
}
}
table(is.na(df2$r_A46_Curr_AVM_AutoVal_d))
df2 <- df[, -drop]
table(is.na(df2$r_A46_Curr_AVM_AutoVal_d))
x <- df2[, 'r_A46_Curr_AVM_AutoVal_d']
sum(is.na(x))
df2[is.na(x), 'r_A46_Curr_AVM_AutoVal_d']
df2[is.na(x), 'r_A46_Curr_AVM_AutoVal_d'] <- max(x, na.rm = T)
sum(is.na(x))
table(is.na(df2$r_A46_Curr_AVM_AutoVal_d))
df2 <- df[, -drop]
for (i in 1:ncol(df2)) {
if (mono[i] == 1) {
x <- df2[,i]
df2[is.na(x), i] <- min(x, na.rm = T)
} else {
df2[is.na(x), i] <- max(x, na.rm = T)
}
}
summary(df2)
df2$r_D31_bk_chapter_n
class(df2$r_D31_bk_chapter_n)
df2 <- df[, -drop]
for (i in 1:ncol(df2)) {
x <- df2[,i]
if (mono[i] == 1) {
df2[is.na(x), i] <- min(x, na.rm = T)
} else {
df2[is.na(x), i] <- max(x, na.rm = T)
}
}
summary(df2)
mod2 <- gbm.fit(x = df2[s, ], y = df[s, 'depvar'],
distribution = 'bernoulli', var.monotone = mono,
n.trees = 1000, shrinkage = 0.1, nTrain = length(s)/2,
keep.data = TRUE, verbose = TRUE, interaction.depth = 1,
n.minobsinnode = 100)
gbm.perf(mod2)
classing2 <- gbm.to.scorecard(mod2, 1:gbm.perf(mod2), df[s,-drop])
classing2[[2]]
classing2[[3]]
classing2[[4]]
classing2[[5]]
classing2[[6]]
classing2[[7]]
classing2[[8]]
classing2[[9]]
classing2[[10]]
classing2[[11]]
classing2[[12]]
classing2[[13]]
classing2[[14]]
classing2[[15]]
classing2[[16]]
classing2[[17]]
classing2[[18]]
classing2[[19]]
classing2[[20]]
plots <- lapply(seq_along(classing2), function(i) {
if (i > 1) {
plt <- convert(classing[[i]])
ggplot(plt, aes(x=value, y=score, fill=score)) +
geom_bar(stat='identity', color='black') +
coord_flip() +
scale_x_discrete(limits=rev(plt$value)) +
scale_fill_gradient2(low='blue', high='red') +
ggtitle(names(classing)[i])
}})
plots[[1]]
plots[[2]]
plots
classing <- gbm.to.scorecard(mod, 1:gbm.perf(mod), df[s,-drop])
undebug(getGBMClassing)
classing <- gbm.to.scorecard(mod, 1:gbm.perf(mod), df[s,-drop])
classing[[1]]
classing[[2]]
phat <- predict.scorecard(classing, df[s, -drop])
phat.mod <- predict.scorecard(mod, df[s, -drop], gbm.perf(mod))
phat.mod <- predict(mod, df[s, -drop], gbm.perf(mod))
head(phat)
head(phat.mod)
all.equal(phat, phat.mod)
fpath <- 'X:/Backup/Heather/RV5T_4752_1503/'
fname <- 'ln_4752_rv5t_dev_val_fcra50_archive_20150303_edina_v50.csv'
cc <- rep("NULL", 1212)
cc[c(134, 138)] <- "character"
sources <- read.csv(paste0(path, fname), header=F, colClasses=cc,
na.string=c("","."))
sources <- read.csv(paste0(fpath, fname), header=F, colClasses=cc,
na.string=c("","."))
head(sources)
dim(sources)
dim(df)
dim(df[dev,])
length(s)
length(dev)
get.idf <- function(x) {
tokens <- strsplit(x[1], split = ",")[[1]]
counts <- as.numeric(strsplit(x[2], split = ",")[[1]])
names(counts) <- tokens
counts
}
res <- apply(sources, 1, get.idf)
res
vals <- na.omit(unique(unlist(sapply(res, names))))
freqs <- rep(1, length(vals))
names(freqs) <- vals
freqs
res[[1]]
for (i in seq_along(res)) {
ids <- na.omit(names(res[[i]]))
freqs[ids] <- freqs[ids] + ifelse(res[[i]] > 0, 1, 0)
}
freqs
idf <- log(length(res)/freqs)
idf
plot(idf)
plot(freqs)
term.frequency <- function(x) {
ids <- na.omit(names(x))
freqs <- rep(1, length(vals))
names(freqs) <- vals
freqs[ids] <- freqs[ids] + x
log(freqs)
}
tf <- do.call(rbind, lapply(res, term.frequency))
tf
head(rf)
head(tf)
tf.idf <- t(t(tf) * idf)
head(tf.idf)
head(sources)
dim(tf.idf)
kms <- lapply(1:20, function(k) kmeans(tf.idf, k))
var.explained <- sapply(kms, function(x) (x$totss - x$tot.withinss) / x$totss)
plot(var.explained) # best is 8 clusters
table(kms[[10]]$cluster)
dev <- df$Selected == 1
sum(dev)
dim(sources)
aggregate(df$depvar[dev], list(kms[[10]]$cluster), mean)
colnames(df)
readLines(paste0(fpath, fname), 1)
readLines(paste0(fpath, fname), 2)
head(df$account)
cc[4] <- 'factor'
sources <- read.csv(paste0(fpath, fname), header=F, colClasses=cc,
na.string=c("","."))
head(sources)
head(df)
head(sources)
head(df$account)
clusters <- data.frame(kms[[10]]$cluster, sources)
head(clusters)
clusters <- data.frame(cluster=kms[[10]]$cluster, sources)
clusters <- data.frame(cluster=kms[[10]]$cluster, account=sources[1])
head(clusters)
clusters <- data.frame(cluster=kms[[10]]$cluster, account=sources[1])
head(clusters)
clusters <- data.frame(cluster=kms[[10]]$cluster, account=sources[,1])
head(clusters)
df3 <- merge(df, clusters)
dim(df3)
head(df3)
aggregate(dev~, df3['cluster'], mean)
aggregate(dev~cluster, df3, mean)
aggregate(depvar~cluster, df3, mean)
mono
df$account == df3$account
head(df3)
head(df2)
dim(df3)
sum(dev)
ok.cols <- grep("^\\w_\\w\\d\\d", colnames(df3))
drop <- which(!get.final.cols(df3, c(colnames(df3)[-ok.cols])))
drop
mono <- get.mono.cols(colnames(df3)[-drop])
mono
s <- sample(nrow(df3), nrow(df3)/2)
length(s)
f <- s[df3[s, 'cluster'] == k)]
mods <- list()
for (k in 1:10) {
f <- s[df3[s, 'cluster'] == k]
mods[[k]] <-
gbm.fit(x = df3[f,-drop], y = df3[f, 'depvar'],
distribution = 'bernoulli', var.monotone = mono,
n.trees = 1000, shrinkage = 0.1, nTrain = length(f)/2,
keep.data = TRUE, verbose = TRUE, interaction.depth = 1,
n.minobsinnode = 100)
}
warnings()
gbm.perf(mods[[1]])
bcs <- lapply(mods, function(x) gbm.to.scorecard(x, gbm.perf(x)))
bcs[[1]]
bcs <- lapply(mods, function(x) gbm.to.scorecard(x, gbm.perf(x), df3[s,-drop]))
bcs[[1]]
phats <- lapply(bcs, predict.scorecard, df3[s, -drop])
phats[[1]]
phats <- lapply(bcs, predict.scorecard, df3[, -drop])
head(phats)
length(phats)
ks.table(phats[[1]], df3[, 'depvar'])
ks.table(phats[[2]], df3[, 'depvar'])
ks.table(df3$cluster, df3[, 'depvar'])
combined <- sapply(1:nrow(df3), function(i) phats[[df3$cluster[i]]][i])
hist(combined, breaks = 100)
hist(phats[[1]], breaks = 100)
hist(phats[[2]], breaks = 100)
hist(phats[[3]], breaks = 100)
hist(phats[[4]], breaks = 100)
hist(phats[[5]], breaks = 100)
hist(phats[[6]], breaks = 100)
hist(phats[[7]], breaks = 100)
hist(phats[[8]], breaks = 100)
ks.table(combined[s], df3[s, 'depvar'])
ks.table(combined[-s], df3[-s, 'depvar'])
